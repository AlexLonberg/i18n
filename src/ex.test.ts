import { test, expect } from 'vitest'
import type { TErrorDetail } from './errors.js'
import { ExI18n } from './ex.js'

function Logger () {
  const errors = [] as TErrorDetail[]
  return {
    log: (error: TErrorDetail) => errors.push(error),
    getLastError: () => errors.length > 0 ? errors[errors.length - 1] : null,
    clear: () => errors.splice(0)
  }
}

test('ExI18n quick start', () => {
  const logger = Logger()

  // –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –º–æ–∂–Ω–æ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª–∏ –∏ –∫–ª—é—á–∏
  const i18n = ExI18n.createInstance<'en-US' | 'ru-RU', string>({
    locale: 'en-US',
    onError: logger.log
  })

  // –ü–æ –∂–µ–ª–∞–Ω–∏—é —Ç–∏–ø–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–∏ –∏–∑ namespace he.says
  const nsSay = i18n.getNamespace<'hi' | 'bye'>('he.says')

  // TypeScript –ø–æ–¥—Å–∫–∞–∂–µ—Ç –∏–º–µ–Ω–∞ –∫–ª—é—á–µ–π hi/bye
  let hi = nsSay.t('hi', { name: 'John' })
  expect(hi).toBe('') // ü§î

  nsSay.on('key', (_name: 'key', key: any) => {
    if (key === 'hi')
      hi = nsSay.t('hi', { name: 'John' })
  })
  nsSay.on('locale', (_name: 'locale', _locale: 'en-US' | 'ru-RU') => {
    hi = nsSay.t('hi', { name: 'John' })
  })

  // –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ –ª—é–±–æ–º namespace
  const nsHe = i18n.register('he')!

  nsHe.set('says.hi', { kind: 'tpl', value: 'Hi, {name}!' }, 'en-US')

  expect(hi).toBe('Hi, John!') // üòÄ

  nsHe.setTemplate('says.hi', '–ü—Ä–∏–≤–µ—Ç, {name}!', 'ru-RU')
  i18n.change('ru-RU')
  expect(hi).toBe('–ü—Ä–∏–≤–µ—Ç, John!') // ü§®

  // –ù–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—â–∞—Ç—å—Å—è, –ø—Ä–æ–∫–∏–Ω—Ç–µ –∫–ª—é—á –∫ –∂–µ–ª–∞–µ–º–æ–º—É
  nsHe.use('says.bye', 'he.says.hi')
  expect(nsSay.t('bye', { name: 'John' })).toBe('–ü—Ä–∏–≤–µ—Ç, John!') // üòÇ
})
